@using NoteBookmark.Domain
@using System.ComponentModel.DataAnnotations
@implements IDialogContentComponent<Domain.Note>

@rendermode InteractiveServer

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <EditForm Model="@_note" FormName="new_note">
        <DataAnnotationsValidator />

        <FluentStack Orientation="Orientation.Vertical">
            <div>
                <FluentTextArea Name="Comment" Label="Comment" @bind-Value="_note.Comment" Required="true" />
                <FluentValidationMessage For="@(() => _note.Comment)" />
            </div>

            <div>
                <FluentTextField Name="Tags" Label="Tags" @bind-Value="_note.Tags" />
                <FluentValidationMessage For="@(() => _note.Tags)" />
            </div>
        </FluentStack>
        <div style="color: var(--error);">
            <FluentValidationSummary />
        </div>
    </EditForm>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!_note.Validate())"
                  OnClick="@SaveAsync">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

@code {
    [Parameter]
    public Domain.Note Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private Domain.Note _note = default!;

    protected override void OnInitialized()
    {
        _note = new Note{PostId = Content.PostId};
    }

    private async Task SaveAsync()
    {
        _note.DateAdded = DateTime.UtcNow;

        if (_note.Validate())
        {
            await Dialog.CloseAsync(_note);
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }


}
