@page "/settings"

@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using NoteBookmark.Domain
@inject ILogger<Settings> Logger
@inject PostNoteClient client
@inject NavigationManager Navigation
@using NoteBookmark.BlazorApp

@rendermode InteractiveServer

<FluentDesignTheme @bind-Mode="@Mode"
				   @bind-OfficeColor="@OfficeColor"
				   StorageName="theme" />

<h3>Settings</h3>

<div>
	<FluentStack Orientation="Orientation.Vertical">
		<FluentSelect   Label="Theme" Width="150px"
						Items="@(Enum.GetValues<DesignThemeModes>())"
						@bind-SelectedOption="@Mode" />
		<FluentSelect   Label="Color"
						Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?)i))"
			Height="200px" Width="250px" @bind-SelectedOption="@OfficeColor">
			<OptionTemplate>
				<FluentStack>
					<FluentIcon Value="@(new Icons.Filled.Size20.RectangleLandscape())" Color="Color.Custom"
						CustomColor="@(@context.ToAttributeValue() != "default" ? context.ToAttributeValue() : "#036ac4" )" />
					<FluentLabel>@context</FluentLabel>
				</FluentStack>
			</OptionTemplate>
		</FluentSelect>
	</FluentStack>
</div>

@if( settings != null)
{
    <div>
        <EditForm Model="@settings" OnValidSubmit="SaveSettings">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <FluentStack Orientation="Orientation.Vertical" Width="100%">
                <FluentTextField Label="Last Bookmark Date" @bind-Value="settings!.LastBookmarkDate" />
                
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentTextField Label="Reading Notes Counter" @bind-Value="settings!.ReadingNotesCounter" />
                    <FluentButton OnClick="IncrementCounter" Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Add())"/>
                </FluentStack>
                
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Save</FluentButton>
        
            </FluentStack>
        </EditForm>   
    </div> 
}


@code {
    public DesignThemeModes Mode { get; set; }
    public OfficeColor? OfficeColor { get; set; }

    private Domain.Settings? settings;

    protected override async Task OnInitializedAsync()
    {
        settings = await client.GetSettings();
    }

    private async Task SaveSettings()
    {
        if (settings != null)
        {
            await client.SaveSettings(settings);
            Navigation.NavigateTo("/");
        }
    }

	void OnLoaded(LoadedEventArgs e)
    {
        Logger.LogInformation($"Loaded: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    }

    void OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        Logger.LogInformation($"Changed: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    }

    private void IncrementCounter()
    {
        var cnt = Convert.ToInt32(settings!.ReadingNotesCounter)+1;
        settings.ReadingNotesCounter = (cnt).ToString();
    }
}
