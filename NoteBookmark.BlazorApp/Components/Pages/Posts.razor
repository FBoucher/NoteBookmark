@page "/posts"
@using NoteBookmark.BlazorApp.Components.Shared
@using NoteBookmark.Domain
@inject PostNoteClient client
@inject IJSRuntime jsRuntime
@inject IToastService toastService
@inject IDialogService DialogService
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>

<h1>Posts</h1>

@* Moved to the menu, to I like it there? 
<FluentAnchor title="Generate Summary" Href="summaryeditor" IconStart="@(new Icons.Regular.Size20.ArrowAutofitHeightIn())" ></FluentAnchor> *@


@* @if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{ *@
    <FluentDataGrid Id="postgrid" Items="@posts">
        <ChildContent>       
            <TemplateColumn Width="150px">
                <FluentButton OnClick="@(async () => await OpenUrlInNewWindow(context!.Url))" IconEnd="@(new Icons.Regular.Size24.Open())" />
                @if (String.IsNullOrEmpty(context!.NoteId))
                {
                    <FluentButton OnClick="@(async () => await CreateNoteForPost(context!.RowKey))"  IconEnd="@(new Icons.Regular.Size24.NoteAdd())" />
                }
                else
                {
                    <FluentButton IconEnd="@(new Icons.Filled.Size24.NoteEdit())" />
                }
            </TemplateColumn>
            <PropertyColumn Title="Title" Property="@(c => c!.Title)" Sortable="true"/>
            <PropertyColumn Title="Published" 
                            Property="@(c => (c!.Date_published ?? "0000-00-00").Substring(0,10))"  
                            Sortable="true" SortBy="@defSort" 
                            IsDefaultSortColumn="true" 
                            Width="130px"/>
        </ChildContent>
        <EmptyContent>
            <FluentIcon Value="@(new Icons.Filled.Size24.Crown())" Color="@Color.Accent" />&nbsp; Nothing to see here. Carry on!
        </EmptyContent>
    </FluentDataGrid>

@* } *@

@code {
    private IQueryable<PostL>? posts;
    private GridSort<PostL> defSort = GridSort<PostL>.ByDescending(c => c.Date_published);

    protected override async Task OnInitializedAsync()
    {
        List<PostL> urPosts = await client.GetUnreadPosts();
        posts = urPosts.AsQueryable();
    }

    private async Task OpenUrlInNewWindow(string? url)
    {
        await jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    private async Task CreateNoteForPost(string postId)
    {
        var newNote = new Note { PostId = postId };

        IDialogReference dialog = await DialogService.ShowDialogAsync<NoteDialog>(newNote, new DialogParameters(){
            Title = "Add a note",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,

        });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var note = (Note)result.Data;
            await client.CreateNote(note);
            ShowConfirmationMessage();
        }
    }

    private void ShowConfirmationMessage()
    {
        toastService.ShowSuccess("Note created successfully!");
    }

}
