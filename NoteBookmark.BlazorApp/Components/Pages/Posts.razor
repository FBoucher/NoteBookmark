@page "/posts"
@using NoteBookmark.BlazorApp.Components.Shared
@using NoteBookmark.Domain
@inject PostNoteClient client
@inject IJSRuntime jsRuntime
@inject IToastService toastService
@inject IDialogService DialogService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>

<h1>Posts</h1>

<FluentStack Orientation="Orientation.Horizontal">
    <FluentButton OnClick="AddNewPost" IconEnd="@(new Icons.Regular.Size24.Add())" Title="Add new post"></FluentButton>
    <FluentTextField @bind-Value="newPostUrl" Placeholder="Enter URL" style="width: 100%;"/>
</FluentStack>

<FluentDataGrid Id="postgrid" Items="@posts">
    <ChildContent>       
        <TemplateColumn Width="150px">
            <FluentButton OnClick="@(async () => await OpenUrlInNewWindow(context!.Url))" IconEnd="@(new Icons.Regular.Size24.Open())" />
            <FluentButton OnClick="@(() => EditNote(context!.RowKey))" IconEnd="@(new Icons.Regular.Size24.Edit())" />
            @if (String.IsNullOrEmpty(context!.NoteId))
            {
                <FluentButton OnClick="@(async () => await CreateNoteForPost(context!.RowKey))"  IconEnd="@(new Icons.Regular.Size24.NoteAdd())" />
            }
            else
            {
                <FluentButton IconEnd="@(new Icons.Filled.Size24.NoteEdit())" />
            }
            <FluentButton OnClick="@(async () => await DeletePost(context!.RowKey))" IconEnd="@(new Icons.Regular.Size24.Delete())" />
        </TemplateColumn>
        <PropertyColumn Title="Title" Property="@(c => c!.Title)" Sortable="true"/>
        <PropertyColumn Title="Published" 
                        Property="@(c => (c!.Date_published ?? "0000-00-00").Substring(0,10))"  
                        Sortable="true" SortBy="@defSort" 
                        IsDefaultSortColumn="true" 
                        Width="130px"/>
    </ChildContent>
    <EmptyContent>
        <FluentIcon Value="@(new Icons.Filled.Size24.Crown())" Color="@Color.Accent" />&nbsp; Nothing to see here. Carry on!
    </EmptyContent>
</FluentDataGrid>


@code {
    private IQueryable<PostL>? posts;
    private GridSort<PostL> defSort = GridSort<PostL>.ByDescending(c => c.Date_published);
    private string newPostUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        List<PostL> urPosts = await client.GetUnreadPosts();
        posts = urPosts.AsQueryable();
    }

    private async Task OpenUrlInNewWindow(string? url)
    {
        await jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    private async Task CreateNoteForPost(string postId)
    {
        var newNote = new Note { PostId = postId };

        IDialogReference dialog = await DialogService.ShowDialogAsync<NoteDialog>(newNote, new DialogParameters(){
            Title = "Add a note",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,

        });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var note = (Note)result.Data;
            await client.CreateNote(note);
            ShowConfirmationMessage();
        }
    }

    private void ShowConfirmationMessage()
    {
        toastService.ShowSuccess("Note created successfully!");
    }

    private void EditNote(string postId)
    {
        Navigation.NavigateTo($"posteditor/{postId}");
    }

    private async Task AddNewPost()
    {
        if (!string.IsNullOrEmpty(newPostUrl))
        {
            var result = await client.ExtractPostDetailsAndSave(newPostUrl);
            if (result)
            {
                await LoadPosts();
                newPostUrl = string.Empty;
                toastService.ShowSuccess("Post added successfully!");
            }
            else
            {
                toastService.ShowError("Failed to add post. Please try again.");
            }
        }
    }

    private async Task DeletePost(string postId)
    {
        var result = await client.DeletePost(postId);
        if (result)
        {
            await LoadPosts();
            toastService.ShowSuccess("Post deleted successfully!");
        }
        else
        {
            toastService.ShowError("Failed to delete post. Please try again.");
        }
    }
}
