@page "/posts"
@using NoteBookmark.Domain
@inject PostNoteClient client
@inject IJSRuntime jsRuntime
@inject IToastService toastService
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>

<h1>Posts</h1>

@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Id="postgrid" Items="@posts">
        <PropertyColumn Title="Title" Property="@(c => c!.Title)" Sortable="true"/>
        <PropertyColumn Title="Published" Property="@(c => (c!.Date_published ?? "0000-00-00").Substring(0,10))"  Sortable="true" SortBy="@defSort" IsDefaultSortColumn="true"/>
        <TemplateColumn>
            <FluentButton OnClick="@(async () => await OpenUrlInNewWindow(context!.Url))">Open</FluentButton>
            <FluentButton OnClick="@(async () => await CreateNoteForPost(context!.RowKey))">
                <FluentIcon Value="@(new Icons.Regular.Size20.NoteAdd())" Color="Color.Accent" />
            </FluentButton>
        </TemplateColumn>
    </FluentDataGrid>

    
}

@code {
    private IQueryable<Post>? posts;
    private GridSort<Post> defSort = GridSort<Post>.ByDescending(c => c.Date_published);

    protected override async Task OnInitializedAsync()
    {
        var urPosts = await client.GetUnreadPosts();
        posts = urPosts.AsQueryable();
    }

    private async Task OpenUrlInNewWindow(string? url)
    {
        await jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    private async Task CreateNoteForPost(string postId)
    {
        // Open the NoteDialog component as a dialog
        var parameters = new Dictionary<string, object>
        {
            { "PostId", postId }
        };

        var dialog = DialogService.Show<NoteDialog>("Create Note", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await CreateNote();
        }
    }

    private async Task CreateNote()
    {
        // Call the API to create the note
        var note = new Note
        {
            PostId = postId,
            DateAdded = DateTime.UtcNow
        };

        await client.CreateNote(note);

        // Display a success toast message
        ShowConfirmationMessage();
    }

    private void ShowConfirmationMessage()
    {
        toastService.ShowSuccess("Note created successfully!");
    }
}
