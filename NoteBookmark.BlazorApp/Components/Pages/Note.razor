@page "/note"
@page "/note/{postId}"
@using NoteBookmark.Domain
@inject PostNoteClient client
@inject IToastService toastService
@inject IJSRuntime jsRuntime

@rendermode InteractiveServer

<PageTitle>Note</PageTitle>

<h3>Create a Note</h3>

<EditForm Model="@note" OnValidSubmit="@HandleValidSubmit"  FormName="new_note">
    <DataAnnotationsValidator />
    <FluentValidationSummary />

    <FluentStack Orientation="Orientation.Vertical">
        <div>
            <FluentTextField Name="Comment" Label="Comment" @bind-Value="note.Comment" Required="true" />
            <FluentValidationMessage For="@(() => note.Comment)" />
        </div>

        <div>
            <FluentTextField Name="Tags" Label="Tags" @bind-Value="note.Tags" />
            <FluentValidationMessage For="@(() => note.Tags)" />
        </div>

        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>

    </FluentStack>

</EditForm>



@code {
    [Parameter]
    public string? postId { get; set; }

    private Domain.Note note = new Domain.Note();

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(postId))
        {
            note.PostId = postId;
        }
    }

    private async Task HandleValidSubmit()
    {
        note.DateAdded = DateTime.UtcNow;

        await client.CreateNote(note);

        ShowConfirmationMessage();
        await jsRuntime.InvokeVoidAsync("open", $"/posts");
    }

    private void ShowConfirmationMessage()
    {
        toastService.ShowSuccess("Note created successfully!");
    }
}
